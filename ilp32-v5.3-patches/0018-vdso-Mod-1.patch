From 141903c13a5dade3c4549e35bdde2bee56a8f2e9 Mon Sep 17 00:00:00 2001
From: Geoff Levand <geoff@infradead.org>
Date: Wed, 9 Oct 2019 17:04:03 -0700
Subject: [PATCH 18/18] vdso: Mod 1

Signed-off-by: Geoff Levand <geoff@infradead.org>
---
 arch/arm64/Kconfig                      | 10 +++
 arch/arm64/Makefile                     |  5 ++
 arch/arm64/include/asm/vdso.h           |  3 +
 arch/arm64/kernel/Makefile              |  1 +
 arch/arm64/kernel/vdso.c                | 84 +++++++++++++++++++++----
 arch/arm64/kernel/vdso_ilp32/Makefile   | 35 +++++++++--
 arch/arm64/kernel/vdso_ilp32/note.c     |  2 +-
 arch/arm64/kernel/vdso_ilp32/vdso.S     |  8 +--
 arch/arm64/kernel/vdso_ilp32/vdso.lds.S |  6 +-
 9 files changed, 129 insertions(+), 25 deletions(-)

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 75a0cf95a22d..3676a2adc310 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -1232,12 +1232,22 @@ config ARM64_ILP32
 	bool "Kernel support for ILP32"
 	select COMPAT
 	select BINFMT_ARM64_ILP32 if BINFMT_ELF
+	select ARM64_ILP32_VDSO
 	default y
 	help
 	  This option enables support for AArch64 ILP32 user space.  ILP32
 	  is an ABI where long and pointers are 32bits but it uses the AARCH64
 	  instruction set.
 
+config ARM64_ILP32_VDSO
+	bool "VDSO support for ILP32"
+	depends on ARM64_ILP32
+	select COMPAT_VDSO
+	default y
+	help
+	  This option enables VDSO support for AArch64 ILP32.
+	  If unsure, say Y.
+
 menu "ARMv8.1 architectural features"
 
 config ARM64_HW_AFDBM
diff --git a/arch/arm64/Makefile b/arch/arm64/Makefile
index 61de992bbea3..c69fe43b493b 100644
--- a/arch/arm64/Makefile
+++ b/arch/arm64/Makefile
@@ -163,6 +163,8 @@ zinstall install:
 PHONY += vdso_install
 vdso_install:
 	$(Q)$(MAKE) $(build)=arch/arm64/kernel/vdso $@
+	$(if $(CONFIG_ARM64_ILP32_VDSO),$(Q)$(MAKE) \
+		$(build)=arch/arm64/kernel/vdso_ilp32 $@)
 
 # We use MRPROPER_FILES and CLEAN_FILES now
 archclean:
@@ -181,6 +183,9 @@ vdso_prepare: prepare0
 	$(if $(CONFIG_COMPAT_VDSO),$(Q)$(MAKE) \
 		$(build)=arch/arm64/kernel/vdso32  \
 		include/generated/vdso32-offsets.h)
+	$(if $(CONFIG_ARM64_ILP32_VDSO),$(Q)$(MAKE) \
+		$(build)=arch/arm64/kernel/vdso_ilp32  \
+		include/generated/vdso-ilp32-offsets.h)
 endif
 
 define archhelp
diff --git a/arch/arm64/include/asm/vdso.h b/arch/arm64/include/asm/vdso.h
index 9c15e0a06301..de4dff775cdd 100644
--- a/arch/arm64/include/asm/vdso.h
+++ b/arch/arm64/include/asm/vdso.h
@@ -20,6 +20,9 @@
 #ifdef CONFIG_COMPAT_VDSO
 #include <generated/vdso32-offsets.h>
 #endif
+#ifdef CONFIG_ARM64_ILP32_VDSO
+#include <generated/vdso-ilp32-offsets.h>
+#endif
 
 #define VDSO_SYMBOL(base, name)						   \
 ({									   \
diff --git a/arch/arm64/kernel/Makefile b/arch/arm64/kernel/Makefile
index e6d4d474c4a9..da5ea9293829 100644
--- a/arch/arm64/kernel/Makefile
+++ b/arch/arm64/kernel/Makefile
@@ -68,6 +68,7 @@ obj-$(CONFIG_ARM64_PTR_AUTH)		+= pointer_auth.o
 
 obj-y					+= vdso/ probes/
 obj-$(CONFIG_COMPAT_VDSO)		+= vdso32/
+obj-$(CONFIG_ARM64_ILP32_VDSO)		+= vdso_ilp32/
 head-y					:= head.o
 extra-y					+= $(head-y) vmlinux.lds
 
diff --git a/arch/arm64/kernel/vdso.c b/arch/arm64/kernel/vdso.c
index 354b11e27c07..5c9d9021ffb7 100644
--- a/arch/arm64/kernel/vdso.c
+++ b/arch/arm64/kernel/vdso.c
@@ -32,19 +32,17 @@ extern char vdso_start[], vdso_end[];
 #ifdef CONFIG_COMPAT_VDSO
 extern char vdso32_start[], vdso32_end[];
 #endif /* CONFIG_COMPAT_VDSO */
+#ifdef CONFIG_ARM64_ILP32_VDSO
+extern char vdso_ilp32_start[], vdso_ilp32_end[];
+#endif /* CONFIG_ARM64_ILP32_VDSO */
 
 /* vdso_lookup arch_index */
 enum arch_vdso_type {
 	ARM64_VDSO = 0,
-#ifdef CONFIG_COMPAT_VDSO
-	ARM64_VDSO32 = 1,
-#endif /* CONFIG_COMPAT_VDSO */
+	ARM64_VDSO32,
+	ARM64_ILP32_VDSO,
+	VDSO_TYPES
 };
-#ifdef CONFIG_COMPAT_VDSO
-#define VDSO_TYPES		(ARM64_VDSO32 + 1)
-#else
-#define VDSO_TYPES		(ARM64_VDSO + 1)
-#endif /* CONFIG_COMPAT_VDSO */
 
 struct __vdso_abi {
 	const char *name;
@@ -63,13 +61,20 @@ static struct __vdso_abi vdso_lookup[VDSO_TYPES] __ro_after_init = {
 		.vdso_code_start = vdso_start,
 		.vdso_code_end = vdso_end,
 	},
-#ifdef CONFIG_COMPAT_VDSO
 	{
 		.name = "vdso32",
+#ifdef CONFIG_COMPAT_VDSO
 		.vdso_code_start = vdso32_start,
 		.vdso_code_end = vdso32_end,
-	},
 #endif /* CONFIG_COMPAT_VDSO */
+	},
+	{
+		.name = "vdso_ilp32",
+#ifdef CONFIG_ARM64_ILP32_VDSO
+		.vdso_code_start = vdso_ilp32_start,
+		.vdso_code_end = vdso_ilp32_end,
+#endif /* CONFIG_ARM64_ILP32_VDSO */
+	},
 };
 
 /*
@@ -97,6 +102,16 @@ static int __vdso_remap(enum arch_vdso_type arch_index,
 	return 0;
 }
 
+static void vdso_print_info(const struct __vdso_abi *p)
+{
+	pr_info("vdso: %ld pages (%ld code @ %p, %ld data @ %p)\n",
+		p->vdso_pages + 1,
+		p->vdso_pages,
+		p->vdso_code_start,
+		1L,
+		vdso_data);
+}
+
 static int __vdso_init(enum arch_vdso_type arch_index)
 {
 	int i;
@@ -113,6 +128,8 @@ static int __vdso_init(enum arch_vdso_type arch_index)
 			vdso_lookup[arch_index].vdso_code_start) >>
 			PAGE_SHIFT;
 
+	vdso_print_info(&vdso_lookup[arch_index]);
+
 	/* Allocate the vDSO pagelist, plus a page for the data. */
 	vdso_pagelist = kcalloc(vdso_lookup[arch_index].vdso_pages + 1,
 				sizeof(struct page *),
@@ -379,6 +396,44 @@ int aarch32_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)
 }
 #endif /* CONFIG_COMPAT */
 
+
+#if defined(CONFIG_ARM64_ILP32_VDSO)
+static int ilp32_vdso_mremap(const struct vm_special_mapping *sm,
+		struct vm_area_struct *new_vma)
+{
+	return __vdso_remap(ARM64_ILP32_VDSO, sm, new_vma);
+}
+
+static int __init ilp32_vdso_init(void)
+{
+/*
+ * ilp32_vdso_pages:
+ * 0 - vvar
+ * 1 - vdso
+ */
+#define ILP32_VVAR		0
+#define ILP32_VDSO		1
+#define ILP32_PAGES		(ILP32_VDSO + 1)
+
+	static struct vm_special_mapping ilp32_vdso_spec[ILP32_PAGES] __ro_after_init = {
+		{
+			.name	= "[vvar]",
+		},
+		{
+			.name	= "[vdso]",
+			.mremap = ilp32_vdso_mremap,
+		},
+	};
+
+	vdso_lookup[ARM64_ILP32_VDSO].dm = &ilp32_vdso_spec[ILP32_VVAR];
+	vdso_lookup[ARM64_ILP32_VDSO].cm = &ilp32_vdso_spec[ILP32_VDSO];
+
+	return __vdso_init(ARM64_ILP32_VDSO);
+}
+
+arch_initcall(ilp32_vdso_init);
+#endif /* CONFIG_ARM64_ILP32_VDSO */
+
 static int vdso_mremap(const struct vm_special_mapping *sm,
 		struct vm_area_struct *new_vma)
 {
@@ -421,10 +476,17 @@ int arch_setup_additional_pages(struct linux_binprm *bprm,
 	if (down_write_killable(&mm->mmap_sem))
 		return -EINTR;
 
-	ret = __setup_additional_pages(ARM64_VDSO,
+	if (is_ilp32_task()) {
+		ret = __setup_additional_pages(ARM64_ILP32_VDSO,
 				       mm,
 				       bprm,
 				       uses_interp);
+	} else {
+		ret = __setup_additional_pages(ARM64_VDSO,
+				       mm,
+				       bprm,
+				       uses_interp);
+	}
 
 	up_write(&mm->mmap_sem);
 
diff --git a/arch/arm64/kernel/vdso_ilp32/Makefile b/arch/arm64/kernel/vdso_ilp32/Makefile
index 6f6b55c12029..d46e5c8f4b93 100644
--- a/arch/arm64/kernel/vdso_ilp32/Makefile
+++ b/arch/arm64/kernel/vdso_ilp32/Makefile
@@ -8,7 +8,7 @@
 
 # Absolute relocation type $(ARCH_REL_TYPE_ABS) needs to be defined before
 # the inclusion of generic Makefile.
-ARCH_REL_TYPE_ABS := R_AARCH64_JUMP_SLOT|R_AARCH64_GLOB_DAT|R_AARCH64_ABS64
+ARCH_REL_TYPE_ABS := R_AARCH64_P32_JUMP_SLOT|R_AARCH64_P32_GLOB_DAT|R_AARCH64_P32_ABS32
 include $(srctree)/lib/vdso/Makefile
 
 obj-vdso := vgettimeofday.o note.o sigreturn.o
@@ -17,13 +17,35 @@ obj-vdso := vgettimeofday.o note.o sigreturn.o
 targets := $(obj-vdso) vdso.so vdso.so.dbg
 obj-vdso := $(addprefix $(obj)/, $(obj-vdso))
 
+KBUILD_LDFLAGS := -EL -maarch64elf32
+
 ldflags-y := -shared -nostdlib -soname=linux-vdso.so.1 --hash-style=sysv \
 		--build-id -n -T
 
 ccflags-y := -fno-common -fno-builtin -fno-stack-protector -ffixed-x18
 ccflags-y += -DDISABLE_BRANCH_PROFILING
 
-CFLAGS_REMOVE_vgettimeofday.o = $(CC_FLAGS_FTRACE) -Os
+CFLAGS_REMOVE_ALL = \
+	-fstack-protector \
+	-fstack-protector-strong \
+	-mabi=lp64 \
+	$(CC_FLAGS_FTRACE) \
+	 -Os
+
+CFLAGS_ADD_ALL = \
+	-mabi=ilp32 \
+	-nostdlib \
+	-Wno-int-to-pointer-cast \
+	-Wno-shift-count-overflow
+
+CFLAGS_REMOVE_vgettimeofday.o += $(CFLAGS_REMOVE_ALL)
+
+CFLAGS_REMOVE_note.o += $(CFLAGS_REMOVE_ALL)
+CFLAGS_note.o += $(CFLAGS_ADD_ALL)
+
+AFLAGS_REMOVE_sigreturn.o += $(CFLAGS_REMOVE_ALL)
+AFLAGS_sigreturn.o += $(CFLAGS_ADD_ALL)
+
 KBUILD_CFLAGS			+= $(DISABLE_LTO)
 KASAN_SANITIZE			:= n
 UBSAN_SANITIZE			:= n
@@ -31,6 +53,7 @@ OBJECT_FILES_NON_STANDARD	:= y
 KCOV_INSTRUMENT			:= n
 
 CFLAGS_vgettimeofday.o = -O2 -mcmodel=tiny
+CFLAGS_vgettimeofday.o += $(CFLAGS_ADD_ALL)
 
 ifneq ($(c-gettimeofday-y),)
   CFLAGS_vgettimeofday.o += -include $(c-gettimeofday-y)
@@ -67,7 +90,7 @@ gen-vdsosym := $(srctree)/$(src)/gen_vdso_offsets.sh
 quiet_cmd_vdsosym = VDSOSYM $@
       cmd_vdsosym = $(NM) $< | $(gen-vdsosym) | LC_ALL=C sort > $@
 
-include/generated/vdso-offsets.h: $(obj)/vdso.so.dbg FORCE
+include/generated/vdso-ilp32-offsets.h: $(obj)/vdso.so.dbg FORCE
 	$(call if_changed,vdsosym)
 
 # Actual build commands
@@ -76,10 +99,10 @@ quiet_cmd_vdsold_and_vdso_check = LD      $@
 
 # Install commands for the unstripped file
 quiet_cmd_vdso_install = INSTALL $@
-      cmd_vdso_install = cp $(obj)/$@.dbg $(MODLIB)/vdso/$@
+      cmd_vdso_install = cp $(obj)/vdso.so.dbg $(MODLIB)/vdso/$@
 
-vdso.so: $(obj)/vdso.so.dbg
+vdso_ilp32.so: $(obj)/vdso.so.dbg
 	@mkdir -p $(MODLIB)/vdso
 	$(call cmd,vdso_install)
 
-vdso_install: vdso.so
+vdso_install: vdso_ilp32.so
diff --git a/arch/arm64/kernel/vdso_ilp32/note.c b/arch/arm64/kernel/vdso_ilp32/note.c
index eff5bf9efb8b..be84ec23b7d7 100644
--- a/arch/arm64/kernel/vdso_ilp32/note.c
+++ b/arch/arm64/kernel/vdso_ilp32/note.c
@@ -11,5 +11,5 @@
 #include <linux/elfnote.h>
 #include <linux/build-salt.h>
 
-ELFNOTE32("Linux", 0, LINUX_VERSION_CODE);
+ELFNOTE64("Linux", 0, LINUX_VERSION_CODE);
 BUILD_SALT;
diff --git a/arch/arm64/kernel/vdso_ilp32/vdso.S b/arch/arm64/kernel/vdso_ilp32/vdso.S
index d1414fee5274..78c3abd32bbf 100644
--- a/arch/arm64/kernel/vdso_ilp32/vdso.S
+++ b/arch/arm64/kernel/vdso_ilp32/vdso.S
@@ -10,12 +10,12 @@
 #include <linux/const.h>
 #include <asm/page.h>
 
-	.globl vdso_start, vdso_end
+	.globl vdso_ilp32_start, vdso_ilp32_end
 	.section .rodata
 	.balign PAGE_SIZE
-vdso_start:
-	.incbin "arch/arm64/kernel/vdso/vdso.so"
+vdso_ilp32_start:
+	.incbin "arch/arm64/kernel/vdso_ilp32/vdso.so"
 	.balign PAGE_SIZE
-vdso_end:
+vdso_ilp32_end:
 
 	.previous
diff --git a/arch/arm64/kernel/vdso_ilp32/vdso.lds.S b/arch/arm64/kernel/vdso_ilp32/vdso.lds.S
index 7ad2d3a0cd48..198241225c33 100644
--- a/arch/arm64/kernel/vdso_ilp32/vdso.lds.S
+++ b/arch/arm64/kernel/vdso_ilp32/vdso.lds.S
@@ -12,8 +12,8 @@
 #include <asm/page.h>
 #include <asm/vdso.h>
 
-OUTPUT_FORMAT("elf64-littleaarch64", "elf64-bigaarch64", "elf64-littleaarch64")
-OUTPUT_ARCH(aarch64)
+OUTPUT_FORMAT("elf32-littleaarch64", "elf32-bigaarch64", "elf32-littleaarch64")
+OUTPUT_ARCH(aarch64:ilp32)
 
 SECTIONS
 {
@@ -84,4 +84,4 @@ VERSION
 /*
  * Make the sigreturn code visible to the kernel.
  */
-VDSO_sigtramp		= __kernel_rt_sigreturn;
+VDSO_sigtramp_ilp32	= __kernel_rt_sigreturn;
-- 
2.17.1

