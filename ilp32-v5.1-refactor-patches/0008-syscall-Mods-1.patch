From a91f68b8041b53525a7b521e44b8b5645c6a4abd Mon Sep 17 00:00:00 2001
From: Geoff Levand <geoff@infradead.org>
Date: Fri, 27 Sep 2019 09:35:20 -0700
Subject: [PATCH 08/14] syscall: Mods 1

---
 arch/arm64/include/asm/syscall.h     |   4 +
 arch/arm64/include/asm/unistd.h      |   1 +
 arch/arm64/include/uapi/asm/unistd.h |   7 +-
 arch/arm64/kernel/Makefile           |   1 +
 arch/arm64/kernel/sys_ilp32.c        | 168 ++++++++-------------------
 arch/arm64/kernel/syscall.c          |  16 ++-
 include/uapi/linux/audit.h           |   2 +
 7 files changed, 75 insertions(+), 124 deletions(-)

diff --git a/arch/arm64/include/asm/syscall.h b/arch/arm64/include/asm/syscall.h
index a179df3674a1..5d823dd2cd8c 100644
--- a/arch/arm64/include/asm/syscall.h
+++ b/arch/arm64/include/asm/syscall.h
@@ -23,6 +23,7 @@
 typedef long (*syscall_fn_t)(struct pt_regs *regs);
 
 extern const syscall_fn_t sys_call_table[];
+extern const syscall_fn_t ilp32_sys_call_table[];
 
 #ifdef CONFIG_COMPAT
 extern const syscall_fn_t compat_sys_call_table[];
@@ -92,6 +93,9 @@ static inline int syscall_get_arch(void)
 	if (is_compat_task())
 		return AUDIT_ARCH_ARM;
 
+	else if (is_ilp32_task())
+		return AUDIT_ARCH_AARCH64ILP32;
+
 	return AUDIT_ARCH_AARCH64;
 }
 
diff --git a/arch/arm64/include/asm/unistd.h b/arch/arm64/include/asm/unistd.h
index f2a83ff6b73c..1f056362e773 100644
--- a/arch/arm64/include/asm/unistd.h
+++ b/arch/arm64/include/asm/unistd.h
@@ -15,6 +15,7 @@
  */
 #ifdef CONFIG_COMPAT
 #define __ARCH_WANT_COMPAT_STAT64
+#define __ARCH_WANT_SYS_LLSEEK		// FIXME: Only for ilp32???
 #define __ARCH_WANT_SYS_GETHOSTNAME
 #define __ARCH_WANT_SYS_PAUSE
 #define __ARCH_WANT_SYS_GETPGRP
diff --git a/arch/arm64/include/uapi/asm/unistd.h b/arch/arm64/include/uapi/asm/unistd.h
index 4703d218663a..dde163997375 100644
--- a/arch/arm64/include/uapi/asm/unistd.h
+++ b/arch/arm64/include/uapi/asm/unistd.h
@@ -15,9 +15,14 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
+#if defined(__ILP32__) || defined(__SYSCALL_COMPAT)
+#define __ARCH_WANT_SYNC_FILE_RANGE2
+#else
 #define __ARCH_WANT_RENAMEAT
-#define __ARCH_WANT_NEW_STAT
 #define __ARCH_WANT_SET_GET_RLIMIT
+#endif
+
+#define __ARCH_WANT_NEW_STAT
 #define __ARCH_WANT_TIME32_SYSCALLS
 
 #include <asm-generic/unistd.h>
diff --git a/arch/arm64/kernel/Makefile b/arch/arm64/kernel/Makefile
index cd434d0719c1..3a373c1e802b 100644
--- a/arch/arm64/kernel/Makefile
+++ b/arch/arm64/kernel/Makefile
@@ -29,6 +29,7 @@ $(obj)/%.stub.o: $(obj)/%.o FORCE
 
 obj-$(CONFIG_COMPAT)			+= sys32.o kuser32.o signal32.o 	\
 					   sys_compat.o
+obj-$(CONFIG_ARM64_ILP32)		+= sys_ilp32.o
 obj-$(CONFIG_FUNCTION_TRACER)		+= ftrace.o entry-ftrace.o
 obj-$(CONFIG_MODULES)			+= module.o
 obj-$(CONFIG_ARM64_MODULE_PLTS)		+= module-plts.o
diff --git a/arch/arm64/kernel/sys_ilp32.c b/arch/arm64/kernel/sys_ilp32.c
index 0f8bcb7de700..c531665068e5 100644
--- a/arch/arm64/kernel/sys_ilp32.c
+++ b/arch/arm64/kernel/sys_ilp32.c
@@ -1,26 +1,6 @@
-/*
- * arch/arm64/kernel/sys32.c
- *
- * Copyright (C) 2015 ARM Ltd.
- *
- * This program is free software(void); you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http(void);//www.gnu.org/licenses/>.
- */
+// SPDX-License-Identifier: GPL-2.0
 
-/*
- * Needed to avoid conflicting __NR_* macros between uapi/asm/unistd.h and
- * asm/unistd32.h.
- */
-#define __COMPAT_SYSCALL_NR
+#define __SYSCALL_COMPAT
 
 #include <linux/compat.h>
 #include <linux/compiler.h>
@@ -28,122 +8,66 @@
 
 #include <asm/syscall.h>
 
-asmlinkage long compat_sys_sigreturn(void);
-asmlinkage long compat_sys_rt_sigreturn(void);
-
-COMPAT_SYSCALL_DEFINE3(aarch32_statfs64, const char __user *, pathname,
-		       compat_size_t, sz, struct compat_statfs64 __user *, buf)
-{
-	/*
-	 * 32-bit ARM applies an OABI compatibility fixup to statfs64 and
-	 * fstatfs64 regardless of whether OABI is in use, and therefore
-	 * arbitrary binaries may rely upon it, so we must do the same.
-	 * For more details, see commit:
-	 *
-	 * 713c481519f19df9 ("[ARM] 3108/2: old ABI compat: statfs64 and
-	 * fstatfs64")
-	 */
-	if (sz == 88)
-		sz = 84;
-
-	return kcompat_sys_statfs64(pathname, sz, buf);
-}
-
-COMPAT_SYSCALL_DEFINE3(aarch32_fstatfs64, unsigned int, fd, compat_size_t, sz,
-		       struct compat_statfs64 __user *, buf)
-{
-	/* see aarch32_statfs64 */
-	if (sz == 88)
-		sz = 84;
-
-	return kcompat_sys_fstatfs64(fd, sz, buf);
-}
-
 /*
- * Note: off_4k is always in units of 4K. If we can't do the
- * requested offset because it is not page-aligned, we return -EINVAL.
+ * AARCH32 requires 4-page alignment for shared memory,
+ * but AARCH64 - only 1 page. This is the only difference
+ * between compat and native sys_shmat(). So ILP32 just pick
+ * AARCH64 version.
  */
-COMPAT_SYSCALL_DEFINE6(aarch32_mmap2, unsigned long, addr, unsigned long, len,
-		       unsigned long, prot, unsigned long, flags,
-		       unsigned long, fd, unsigned long, off_4k)
-{
-	if (off_4k & (~PAGE_MASK >> 12))
-		return -EINVAL;
-
-	off_4k >>= (PAGE_SHIFT - 12);
-
-	return ksys_mmap_pgoff(addr, len, prot, flags, fd, off_4k);
-}
-
-#ifdef CONFIG_CPU_BIG_ENDIAN
-#define arg_u32p(name)	u32, name##_hi, u32, name##_lo
-#else
-#define arg_u32p(name)	u32, name##_lo, u32, name##_hi
-#endif
-
-#define arg_u64(name)	(((u64)name##_hi << 32) | name##_lo)
+#define __arm64_compat_sys_shmat		__arm64_sys_shmat
 
-COMPAT_SYSCALL_DEFINE6(aarch32_pread64, unsigned int, fd, char __user *, buf,
-		       size_t, count, u32, __pad, arg_u32p(pos))
-{
-	return ksys_pread64(fd, buf, count, arg_u64(pos));
-}
-
-COMPAT_SYSCALL_DEFINE6(aarch32_pwrite64, unsigned int, fd,
-		       const char __user *, buf, size_t, count, u32, __pad,
-		       arg_u32p(pos))
-{
-	return ksys_pwrite64(fd, buf, count, arg_u64(pos));
-}
-
-COMPAT_SYSCALL_DEFINE4(aarch32_truncate64, const char __user *, pathname,
-		       u32, __pad, arg_u32p(length))
-{
-	return ksys_truncate(pathname, arg_u64(length));
-}
+/*
+ * ILP32 needs special handling for some ptrace requests.
+ */
+#define __arm64_sys_ptrace			__arm64_compat_sys_ptrace
 
-COMPAT_SYSCALL_DEFINE4(aarch32_ftruncate64, unsigned int, fd, u32, __pad,
-		       arg_u32p(length))
-{
-	return ksys_ftruncate(fd, arg_u64(length));
-}
+/*
+ * Using AARCH32 interface for syscalls that take 64-bit
+ * parameters in registers.
+ */
+#define __arm64_compat_sys_fadvise64_64		__arm64_compat_sys_aarch32_fadvise64_64
+#define __arm64_compat_sys_fallocate		__arm64_compat_sys_aarch32_fallocate
+#define __arm64_compat_sys_ftruncate64		__arm64_compat_sys_aarch32_ftruncate64
+#define __arm64_compat_sys_pread64		__arm64_compat_sys_aarch32_pread64
+#define __arm64_compat_sys_pwrite64		__arm64_compat_sys_aarch32_pwrite64
+#define __arm64_compat_sys_readahead		__arm64_compat_sys_aarch32_readahead
+#define __arm64_compat_sys_sync_file_range2	__arm64_compat_sys_aarch32_sync_file_range2
+#define __arm64_compat_sys_truncate64		__arm64_compat_sys_aarch32_truncate64
+#define __arm64_sys_mmap2			__arm64_compat_sys_aarch32_mmap2
 
-COMPAT_SYSCALL_DEFINE5(aarch32_readahead, int, fd, u32, __pad,
-		       arg_u32p(offset), size_t, count)
-{
-	return ksys_readahead(fd, arg_u64(offset), count);
-}
+/*
+ * Using AARCH32 interface for syscalls that take the size of
+ * struct statfs as an argument, as it's calculated differently
+ * in kernel and user spaces.
+ */
+#define __arm64_compat_sys_fstatfs64		__arm64_compat_sys_aarch32_fstatfs64
+#define __arm64_compat_sys_statfs64		__arm64_compat_sys_aarch32_statfs64
 
-COMPAT_SYSCALL_DEFINE6(aarch32_fadvise64_64, int, fd, int, advice,
-		       arg_u32p(offset), arg_u32p(len))
-{
-	return ksys_fadvise64_64(fd, arg_u64(offset), arg_u64(len), advice);
-}
+/*
+ * Using old interface for IPC syscalls that should handle IPC_64 flag.
+ */
+#define __arm64_compat_sys_semctl		__arm64_compat_sys_old_semctl
+#define __arm64_compat_sys_msgctl		__arm64_compat_sys_old_msgctl
+#define __arm64_compat_sys_shmctl		__arm64_compat_sys_old_shmctl
 
-COMPAT_SYSCALL_DEFINE6(aarch32_sync_file_range2, int, fd, unsigned int, flags,
-		       arg_u32p(offset), arg_u32p(nbytes))
-{
-	return ksys_sync_file_range(fd, arg_u64(offset), arg_u64(nbytes),
-				    flags);
-}
+#define __arm64_compat_sys_rt_sigreturn		__arm64_compat_sys_ilp32_rt_sigreturn
 
-COMPAT_SYSCALL_DEFINE6(aarch32_fallocate, int, fd, int, mode,
-		       arg_u32p(offset), arg_u32p(len))
-{
-	return ksys_fallocate(fd, mode, arg_u64(offset), arg_u64(len));
-}
+/*
+ * Wrappers to pass the pt_regs argument.
+ */
+#define sys_personality		sys_arm64_personality
 
 asmlinkage long sys_ni_syscall(const struct pt_regs *);
 #define __arm64_sys_ni_syscall	sys_ni_syscall
 
 #undef __SYSCALL
 #define __SYSCALL(nr, sym)	asmlinkage long __arm64_##sym(const struct pt_regs *);
-#include <asm/unistd32.h>
+#include <asm/unistd.h>
 
 #undef __SYSCALL
 #define __SYSCALL(nr, sym)	[nr] = (syscall_fn_t)__arm64_##sym,
 
-const syscall_fn_t compat_sys_call_table[__NR_compat_syscalls] = {
-	[0 ... __NR_compat_syscalls - 1] = (syscall_fn_t)sys_ni_syscall,
-#include <asm/unistd32.h>
+const syscall_fn_t ilp32_sys_call_table[__NR_syscalls] = {
+	[0 ... __NR_syscalls - 1] = (syscall_fn_t)sys_ni_syscall,
+#include <asm/unistd.h>
 };
diff --git a/arch/arm64/kernel/syscall.c b/arch/arm64/kernel/syscall.c
index 5610ac01c1ec..76d91a1ec1ba 100644
--- a/arch/arm64/kernel/syscall.c
+++ b/arch/arm64/kernel/syscall.c
@@ -125,8 +125,22 @@ static inline void sve_user_discard(void)
 
 asmlinkage void el0_svc_handler(struct pt_regs *regs)
 {
+	const syscall_fn_t *table = sys_call_table;
+
+	if (unlikely(is_ilp32_task())) {
+		table = ilp32_sys_call_table;
+		regs->regs[0] &= UINT_MAX;
+		regs->regs[1] &= UINT_MAX;
+		regs->regs[2] &= UINT_MAX;
+		regs->regs[3] &= UINT_MAX;
+		regs->regs[4] &= UINT_MAX;
+		regs->regs[5] &= UINT_MAX;
+		regs->regs[6] &= UINT_MAX;
+		regs->regs[7] &= UINT_MAX;
+	}
+
 	sve_user_discard();
-	el0_svc_common(regs, regs->regs[8], __NR_syscalls, sys_call_table);
+	el0_svc_common(regs, regs->regs[8], __NR_syscalls, table);
 }
 
 #ifdef CONFIG_COMPAT
diff --git a/include/uapi/linux/audit.h b/include/uapi/linux/audit.h
index f28acd952d03..9121b04dc724 100644
--- a/include/uapi/linux/audit.h
+++ b/include/uapi/linux/audit.h
@@ -374,6 +374,8 @@ enum {
 #define __AUDIT_ARCH_LE	   0x40000000
 
 #define AUDIT_ARCH_AARCH64	(EM_AARCH64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
+#define AUDIT_ARCH_AARCH64ILP32	(EM_AARCH64|__AUDIT_ARCH_LE)
+
 #define AUDIT_ARCH_ALPHA	(EM_ALPHA|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
 #define AUDIT_ARCH_ARM		(EM_ARM|__AUDIT_ARCH_LE)
 #define AUDIT_ARCH_ARMEB	(EM_ARM)
-- 
2.17.1

