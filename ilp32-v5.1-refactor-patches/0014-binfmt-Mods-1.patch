From 9c3a140cd31f1910a3342a9586881b47ae803cfa Mon Sep 17 00:00:00 2001
From: Geoff Levand <geoff@infradead.org>
Date: Fri, 27 Sep 2019 09:35:21 -0700
Subject: [PATCH 14/14] binfmt: Mods 1

Signed-off-by: Geoff Levand <geoff@infradead.org>
---
 arch/arm64/Kconfig           |  3 +-
 fs/Kconfig.binfmt            |  8 ++++
 fs/Makefile                  |  2 +
 fs/arm64_compat_binfmt_elf.c | 35 ++++++++++++++
 fs/arm64_ilp32_binfmt_elf.c  | 91 +++++++++++++-----------------------
 5 files changed, 79 insertions(+), 60 deletions(-)
 create mode 100644 fs/arm64_compat_binfmt_elf.c

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 85248b7e802c..b65614b9867f 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -1478,7 +1478,7 @@ endmenu
 config COMPAT
 	bool "Kernel support for 32-bit EL0"
 	depends on ARM64_4K_PAGES || EXPERT
-	select COMPAT_BINFMT_ELF if BINFMT_ELF
+	select ARM64_COMPAT_BINFMT if BINFMT_ELF
 	select HAVE_UID16
 	select OLD_SIGSUSPEND3
 	select COMPAT_OLD_SIGACTION
@@ -1497,6 +1497,7 @@ config COMPAT
 config ARM64_ILP32
 	bool "Kernel support for ILP32"
 	select COMPAT
+	select ARM64_ILP32_BINFMT if BINFMT_ELF
 	default y
 	help
 	  This option enables support for AArch64 ILP32 user space.  ILP32
diff --git a/fs/Kconfig.binfmt b/fs/Kconfig.binfmt
index b795f8da81f3..aabf3671f192 100644
--- a/fs/Kconfig.binfmt
+++ b/fs/Kconfig.binfmt
@@ -32,6 +32,14 @@ config COMPAT_BINFMT_ELF
 	depends on COMPAT && BINFMT_ELF
 	select ELFCORE
 
+config ARM64_COMPAT_BINFMT
+	bool
+	depends on COMPAT && BINFMT_ELF
+
+config ARM64_ILP32_BINFMT
+	bool
+	depends on ARM64_ILP32 && BINFMT_ELF
+
 config ARCH_BINFMT_ELF_STATE
 	bool
 
diff --git a/fs/Makefile b/fs/Makefile
index 427fec226fae..9cd2ebd2a1d0 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -44,6 +44,8 @@ obj-$(CONFIG_BINFMT_ELF)	+= binfmt_elf.o
 obj-$(CONFIG_COMPAT_BINFMT_ELF)	+= compat_binfmt_elf.o
 obj-$(CONFIG_BINFMT_ELF_FDPIC)	+= binfmt_elf_fdpic.o
 obj-$(CONFIG_BINFMT_FLAT)	+= binfmt_flat.o
+obj-$(CONFIG_ARM64_COMPAT_BINFMT)	+= arm64_compat_binfmt_elf.o
+obj-$(CONFIG_ARM64_ILP32_BINFMT)	+= arm64_ilp32_binfmt_elf.o
 
 obj-$(CONFIG_FS_MBCACHE)	+= mbcache.o
 obj-$(CONFIG_FS_POSIX_ACL)	+= posix_acl.o
diff --git a/fs/arm64_compat_binfmt_elf.c b/fs/arm64_compat_binfmt_elf.c
new file mode 100644
index 000000000000..aa1329174fa7
--- /dev/null
+++ b/fs/arm64_compat_binfmt_elf.c
@@ -0,0 +1,35 @@
+// SPDX-License-Identifier: GPL-2.0
+
+/*
+ * Support for AArch32 Linux ELF binaries.
+ */
+
+/* AArch32 EABI. */
+#define EF_ARM_EABI_MASK		0xff000000
+
+#define compat_start_thread		compat_start_thread
+/*
+ * Unlike the native SET_PERSONALITY macro, the compat version inherits
+ * READ_IMPLIES_EXEC across a fork() since this is the behaviour on
+ * arch/arm/.
+ */
+#define COMPAT_SET_PERSONALITY(ex)					\
+({									\
+	clear_thread_flag(TIF_32BIT_AARCH64);				\
+	set_thread_flag(TIF_32BIT);					\
+})
+
+#define COMPAT_ARCH_DLINFO
+#define COMPAT_ELF_HWCAP		(a32_elf_hwcap)
+#define COMPAT_ELF_HWCAP2		(a32_elf_hwcap2)
+
+#define compat_arch_setup_additional_pages \
+					aarch32_setup_vectors_page
+
+/* AArch32 EABI. */
+#define compat_elf_check_arch(x)	(system_supports_32bit_el0() && \
+					 ((x)->e_machine == EM_ARM) && \
+					 ((x)->e_flags & EF_ARM_EABI_MASK))
+
+
+#include "compat_binfmt_elf.c"
diff --git a/fs/arm64_ilp32_binfmt_elf.c b/fs/arm64_ilp32_binfmt_elf.c
index 15f6e96b3bd9..d348c26822a8 100644
--- a/fs/arm64_ilp32_binfmt_elf.c
+++ b/fs/arm64_ilp32_binfmt_elf.c
@@ -1,17 +1,7 @@
+// SPDX-License-Identifier: GPL-2.0
+
 /*
- * 32-bit compatibility support for ELF format executables and core dumps.
- *
- * Copyright (C) 2007 Red Hat, Inc.  All rights reserved.
- *
- * This copyrighted material is made available to anyone wishing to use,
- * modify, copy, or redistribute it subject to the terms and conditions
- * of the GNU General Public License v.2.
- *
- * Red Hat Author: Roland McGrath.
- *
- * This file is used in a 64-bit kernel that wants to support 32-bit ELF.
- * asm/elf.h is responsible for defining the compat_* and COMPAT_* macros
- * used below, with definitions appropriate for 32-bit ABI compatibility.
+ * Support for ARM64 ILP32 ELF executables.
  *
  * We use macros to rename the ABI types and machine-dependent
  * functions used in binfmt_elf.c to compat versions.
@@ -19,6 +9,7 @@
 
 #include <linux/elfcore-compat.h>
 #include <linux/time.h>
+#include <linux/thread_info.h>
 
 /*
  * Rename the basic ELF layout types to refer to the 32-bit class of files.
@@ -48,11 +39,14 @@
  * The machine-dependent core note format types are defined in elfcore-compat.h,
  * which requires asm/elf.h to define compat_elf_gregset_t et al.
  */
+#undef compat_elf_gregset_t
+#define compat_elf_gregset_t	elf_gregset_t
+
 #define elf_prstatus	compat_elf_prstatus
 #define elf_prpsinfo	compat_elf_prpsinfo
 
 #undef ns_to_timeval
-#define ns_to_timeval ns_to_old_timeval32
+#define ns_to_timeval ns_to_compat_timeval
 
 /*
  * To use this file, asm/elf.h must define compat_elf_check_arch.
@@ -60,61 +54,40 @@
  * differ from the native ones, or omitted when they match.
  */
 
-#undef	ELF_ARCH
 #undef	elf_check_arch
-#define	elf_check_arch	compat_elf_check_arch
+#define	elf_check_arch(x)		(((x)->e_machine == EM_AARCH64)	\
+					&& (x)->e_ident[EI_CLASS] == ELFCLASS32)
 
-#ifdef	COMPAT_ELF_PLATFORM
 #undef	ELF_PLATFORM
-#define	ELF_PLATFORM		COMPAT_ELF_PLATFORM
-#endif
-
-#ifdef	COMPAT_ELF_HWCAP
-#undef	ELF_HWCAP
-#define	ELF_HWCAP		COMPAT_ELF_HWCAP
-#endif
+#if defined(__AARCH64EB__)
+#define	ELF_PLATFORM		("aarch64_be:ilp32")
+#else
+#define	ELF_PLATFORM		("aarch64:ilp32")
+#endif /* defined(__AARCH64EB__) */
 
-#ifdef	COMPAT_ELF_HWCAP2
-#undef	ELF_HWCAP2
-#define	ELF_HWCAP2		COMPAT_ELF_HWCAP2
-#endif
+#undef	SET_PERSONALITY
+#define	SET_PERSONALITY(ex)						\
+do {									\
+	set_bit(TIF_32BIT, &current->mm->context.flags);	\
+	set_thread_flag(TIF_ILP32);				\
+	clear_thread_flag(TIF_32BIT);					\
+} while (0)
 
-#ifdef	COMPAT_ARCH_DLINFO
 #undef	ARCH_DLINFO
-#define	ARCH_DLINFO		COMPAT_ARCH_DLINFO
-#endif
+#define	ARCH_DLINFO							\
+do {									\
+	NEW_AUX_ENT(AT_SYSINFO_EHDR,					\
+		    (elf_addr_t)(long)current->mm->context.vdso);	\
+} while (0)
 
-#ifdef	COMPAT_ELF_ET_DYN_BASE
 #undef	ELF_ET_DYN_BASE
-#define	ELF_ET_DYN_BASE		COMPAT_ELF_ET_DYN_BASE
-#endif
-
-#ifdef COMPAT_ELF_EXEC_PAGESIZE
-#undef	ELF_EXEC_PAGESIZE
-#define	ELF_EXEC_PAGESIZE	COMPAT_ELF_EXEC_PAGESIZE
-#endif
+#define	ELF_ET_DYN_BASE	COMPAT_ELF_ET_DYN_BASE
 
-#ifdef	COMPAT_ELF_PLAT_INIT
-#undef	ELF_PLAT_INIT
-#define	ELF_PLAT_INIT		COMPAT_ELF_PLAT_INIT
-#endif
+#undef	ELF_HWCAP
+#define	ELF_HWCAP			((u32) elf_hwcap)
 
-#ifdef	COMPAT_SET_PERSONALITY
-#undef	SET_PERSONALITY
-#define	SET_PERSONALITY		COMPAT_SET_PERSONALITY
-#endif
-
-#ifdef	compat_start_thread
-#undef	start_thread
-#define	start_thread		compat_start_thread
-#endif
-
-#ifdef	compat_arch_setup_additional_pages
-#undef	ARCH_HAS_SETUP_ADDITIONAL_PAGES
-#define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1
-#undef	arch_setup_additional_pages
-#define	arch_setup_additional_pages compat_arch_setup_additional_pages
-#endif
+#undef	ELF_HWCAP2
+#define	ELF_HWCAP2			((u32) (elf_hwcap >> 32))
 
 /*
  * Rename a few of the symbols that binfmt_elf.c will define.
-- 
2.17.1

