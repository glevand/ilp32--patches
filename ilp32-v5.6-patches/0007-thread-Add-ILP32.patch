From f099f2b25eb4e1228a0f0ef70b31def0e85ecf61 Mon Sep 17 00:00:00 2001
From: Geoff Levand <geoff@infradead.org>
Date: Wed, 9 Oct 2019 17:04:02 -0700
Subject: [PATCH 07/22] thread: Add ILP32

Signed-off-by: Geoff Levand <geoff@infradead.org>
---
 arch/arm64/include/asm/compat.h      | 33 ++++++++++++++++++++++++++++
 arch/arm64/include/asm/elf.h         |  4 +++-
 arch/arm64/include/asm/processor.h   |  8 +++----
 arch/arm64/include/asm/thread_info.h |  5 +++++
 mm/util.c                            |  4 ++--
 5 files changed, 47 insertions(+), 7 deletions(-)

diff --git a/arch/arm64/include/asm/compat.h b/arch/arm64/include/asm/compat.h
index 935d2aa231bf..b3faf2f16121 100644
--- a/arch/arm64/include/asm/compat.h
+++ b/arch/arm64/include/asm/compat.h
@@ -198,4 +198,37 @@ static inline int is_compat_thread(struct thread_info *thread)
 }
 
 #endif /* CONFIG_COMPAT */
+
+static inline int is_ilp32_task(void)
+{
+#if defined(CONFIG_ARM64_ILP32)
+	return test_thread_flag(TIF_ILP32);
+#else
+	return 0;
+#endif
+}
+
+static inline int is_ilp32_thread(struct thread_info *thread)
+{
+#if defined(CONFIG_ARM64_ILP32)
+	return test_ti_thread_flag(thread, TIF_ILP32);
+#else
+	return 0;
+#endif
+}
+
+static inline int is_32bit_task(void)
+{
+#if defined(CONFIG_COMPAT)
+	return is_compat_task() || is_ilp32_task();
+#else
+	return is_ilp32_task();
+#endif
+}
+
+static inline int is_32bit_thread(struct thread_info *thread)
+{
+	return is_compat_thread(thread) || is_ilp32_thread(thread);
+}
+
 #endif /* __ASM_COMPAT_H */
diff --git a/arch/arm64/include/asm/elf.h b/arch/arm64/include/asm/elf.h
index b618017205a3..b417cbd5ad97 100644
--- a/arch/arm64/include/asm/elf.h
+++ b/arch/arm64/include/asm/elf.h
@@ -136,6 +136,7 @@ typedef struct user_fpsimd_state elf_fpregset_t;
 #define SET_PERSONALITY(ex)						\
 ({									\
 	clear_thread_flag(TIF_32BIT);					\
+	clear_thread_flag(TIF_ILP32);					\
 	current->personality &= ~READ_IMPLIES_EXEC;			\
 })
 
@@ -163,7 +164,7 @@ extern int arch_setup_additional_pages(struct linux_binprm *bprm,
 
 /* 1GB of VA */
 #ifdef CONFIG_COMPAT
-#define STACK_RND_MASK			(test_thread_flag(TIF_32BIT) ? \
+#define STACK_RND_MASK			(test_thread_flag_32bit() ? \
 						0x7ff >> (PAGE_SHIFT - 12) : \
 						0x3ffff >> (PAGE_SHIFT - 12))
 #else
@@ -200,6 +201,7 @@ typedef compat_elf_greg_t		compat_elf_gregset_t[COMPAT_ELF_NGREG];
  */
 #define COMPAT_SET_PERSONALITY(ex)					\
 ({									\
+	clear_thread_flag(TIF_ILP32);					\
 	set_thread_flag(TIF_32BIT);					\
  })
 #ifdef CONFIG_COMPAT_VDSO
diff --git a/arch/arm64/include/asm/processor.h b/arch/arm64/include/asm/processor.h
index 5ba63204d078..2aef42e8e3bf 100644
--- a/arch/arm64/include/asm/processor.h
+++ b/arch/arm64/include/asm/processor.h
@@ -56,11 +56,11 @@
 #else
 #define TASK_SIZE_32		(UL(0x100000000) - PAGE_SIZE)
 #endif /* CONFIG_ARM64_64K_PAGES */
-#define TASK_SIZE		(test_thread_flag(TIF_32BIT) ? \
+#define TASK_SIZE		(test_thread_flag_32bit() ? \
 				TASK_SIZE_32 : TASK_SIZE_64)
-#define TASK_SIZE_OF(tsk)	(test_tsk_thread_flag(tsk, TIF_32BIT) ? \
+#define TASK_SIZE_OF(tsk)	(test_tsk_thread_flag_32bit(tsk) ? \
 				TASK_SIZE_32 : TASK_SIZE_64)
-#define DEFAULT_MAP_WINDOW	(test_thread_flag(TIF_32BIT) ? \
+#define DEFAULT_MAP_WINDOW	(test_thread_flag_32bit() ? \
 				TASK_SIZE_32 : DEFAULT_MAP_WINDOW_64)
 #else
 #define TASK_SIZE		TASK_SIZE_64
@@ -77,7 +77,7 @@
 
 #ifdef CONFIG_COMPAT
 #define AARCH32_VECTORS_BASE	0xffff0000
-#define STACK_TOP		(test_thread_flag(TIF_32BIT) ? \
+#define STACK_TOP		(test_thread_flag_32bit() ? \
 				AARCH32_VECTORS_BASE : STACK_TOP_MAX)
 #else
 #define STACK_TOP		STACK_TOP_MAX
diff --git a/arch/arm64/include/asm/thread_info.h b/arch/arm64/include/asm/thread_info.h
index f0cec4160136..601921359c49 100644
--- a/arch/arm64/include/asm/thread_info.h
+++ b/arch/arm64/include/asm/thread_info.h
@@ -78,6 +78,7 @@ void arch_release_task_struct(struct task_struct *tsk);
 #define TIF_SVE_VL_INHERIT	24	/* Inherit sve_vl_onexec across exec */
 #define TIF_SSBD		25	/* Wants SSB mitigation */
 #define TIF_TAGGED_ADDR		26	/* Allow tagged user addresses */
+#define TIF_ILP32		27	/* ILP32 process */
 
 #define _TIF_SIGPENDING		(1 << TIF_SIGPENDING)
 #define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)
@@ -93,6 +94,10 @@ void arch_release_task_struct(struct task_struct *tsk);
 #define _TIF_FSCHECK		(1 << TIF_FSCHECK)
 #define _TIF_32BIT		(1 << TIF_32BIT)
 #define _TIF_SVE		(1 << TIF_SVE)
+#define _TIF_ILP32		(1 << TIF_ILP32)
+
+#define test_thread_flag_32bit() (test_thread_flag(TIF_32BIT) || test_thread_flag(TIF_ILP32))
+#define test_tsk_thread_flag_32bit(tsk) (test_tsk_thread_flag(tsk, TIF_32BIT) || test_tsk_thread_flag(tsk, TIF_ILP32))
 
 #define _TIF_WORK_MASK		(_TIF_NEED_RESCHED | _TIF_SIGPENDING | \
 				 _TIF_NOTIFY_RESUME | _TIF_FOREIGN_FPSTATE | \
diff --git a/mm/util.c b/mm/util.c
index 988d11e6c17c..33450cfdb401 100644
--- a/mm/util.c
+++ b/mm/util.c
@@ -334,7 +334,7 @@ unsigned long randomize_stack_top(unsigned long stack_top)
 unsigned long arch_randomize_brk(struct mm_struct *mm)
 {
 	/* Is the current task 32bit ? */
-	if (!IS_ENABLED(CONFIG_64BIT) || is_compat_task())
+	if (!IS_ENABLED(CONFIG_64BIT) || is_32bit_task())
 		return randomize_page(mm->brk, SZ_32M);
 
 	return randomize_page(mm->brk, SZ_1G);
@@ -345,7 +345,7 @@ unsigned long arch_mmap_rnd(void)
 	unsigned long rnd;
 
 #ifdef CONFIG_HAVE_ARCH_MMAP_RND_COMPAT_BITS
-	if (is_compat_task())
+	if (is_32bit_task())
 		rnd = get_random_long() & ((1UL << mmap_rnd_compat_bits) - 1);
 	else
 #endif /* CONFIG_HAVE_ARCH_MMAP_RND_COMPAT_BITS */
-- 
2.20.1

